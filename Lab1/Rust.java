/* Rust.java */
/* Generated By:JavaCC: Do not edit this line. Rust.java */
public class Rust implements RustConstants {
    public static void main(String args[]) {
        Rust parser;

        if (args.length == 0) {
            parser = new Rust(System.in);
        } else {
            try {
                parser = new Rust(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
                System.out.println("Error: The file " + args[0] + " was not found.");
                return;
            }
        }
        try {
            parser.enable_tracing();
            parser.Start();
        } catch (ParseException e) {
            System.out.println("Error: There was an error during the parse.");
            System.out.println(e.getMessage());
        } catch (TokenMgrError e) {
            System.out.println("Error: There was an error.");
            System.out.println(e.getMessage());
        }
    }

  static final public void Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case KW_AS:
      case KW_BREAK:
      case KW_CONST:
      case KW_CONTINUE:
      case KW_CRATE:
      case KW_ELSE:
      case KW_ENUM:
      case KW_EXTERN:
      case KW_FALSE:
      case KW_FN:
      case KW_FOR:
      case KW_IF:
      case KW_IMPL:
      case KW_IN:
      case KW_LET:
      case KW_LOOP:
      case KW_MATCH:
      case KW_MOD:
      case KW_MOVE:
      case KW_MUT:
      case KW_PUB:
      case KW_REF:
      case KW_RETURN:
      case KW_SELFVALUE:
      case KW_SELFTYPE:
      case KW_STATIC:
      case KW_STRUCT:
      case KW_SUPER:
      case KW_TRAIT:
      case KW_TRUE:
      case KW_TYPE:
      case KW_UNSAFE:
      case KW_USE:
      case KW_WHERE:
      case KW_WHILE:
      case KW_ASYNC:
      case KW_AWAIT:
      case KW_UNION:
      case KW_STATICLIFETIME:
      case KW_DYN:
      case KW_ABSTRACT:
      case KW_BECOME:
      case KW_BOX:
      case KW_DO:
      case KW_FINAL:
      case KW_MACRO:
      case KW_OVERRIDE:
      case KW_PRIV:
      case KW_TYPEOF:
      case KW_UNSIZED:
      case KW_VIRTUAL:
      case KW_YIELD:
      case Plus:
      case Minus:
      case Star:
      case Slash:
      case Percent:
      case Caret:
      case Not:
      case And:
      case Or:
      case AndAnd:
      case OrOr:
      case Shl:
      case Shr:
      case PlusEq:
      case MinusEq:
      case StarEq:
      case SlashEq:
      case CaretEq:
      case AndEq:
      case OrEq:
      case ShlEq:
      case ShrEq:
      case Eq:
      case EqEq:
      case Ne:
      case Lt:
      case Le:
      case Gt:
      case Ge:
      case At:
      case Underscore:
      case Dot:
      case DotDot:
      case DotDotDot:
      case DotDotEq:
      case Comma:
      case Semi:
      case Colon:
      case PathSep:
      case RArrow:
      case FatArrow:
      case Pound:
      case Dollar:
      case Question:
      case Tile:
      case IDENTIFIER:
      case CHAR_LITERAL:
      case STRING_LITERAL:
      case RAW_STRING_LITERAL:
      case BYTE_LITERAL:
      case BYTE_STRING_LITERAL:
      case RAW_BYTE_STRING_LITERAL:
      case INTEGER_LITERAL:
      case FLOAT_LITERAL:
      case RESERVED_NUMBER:
      case CurlyOpen:
      case CurlyClose:
      case ParenOpen:
      case ParenClose:
      case BracketOpen:
      case BracketClose:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case CHAR_LITERAL:{
        jj_consume_token(CHAR_LITERAL);
        break;
        }
      case STRING_LITERAL:{
        jj_consume_token(STRING_LITERAL);
        break;
        }
      case FLOAT_LITERAL:{
        jj_consume_token(FLOAT_LITERAL);
        break;
        }
      case BYTE_LITERAL:{
        jj_consume_token(BYTE_LITERAL);
        break;
        }
      case BYTE_STRING_LITERAL:{
        jj_consume_token(BYTE_STRING_LITERAL);
        break;
        }
      case RAW_STRING_LITERAL:{
        jj_consume_token(RAW_STRING_LITERAL);
        break;
        }
      case RAW_BYTE_STRING_LITERAL:{
        jj_consume_token(RAW_BYTE_STRING_LITERAL);
        break;
        }
      case RESERVED_NUMBER:{
        jj_consume_token(RESERVED_NUMBER);
        break;
        }
      case Plus:{
        jj_consume_token(Plus);
        break;
        }
      case Minus:{
        jj_consume_token(Minus);
        break;
        }
      case Star:{
        jj_consume_token(Star);
        break;
        }
      case Slash:{
        jj_consume_token(Slash);
        break;
        }
      case Percent:{
        jj_consume_token(Percent);
        break;
        }
      case Caret:{
        jj_consume_token(Caret);
        break;
        }
      case Not:{
        jj_consume_token(Not);
        break;
        }
      case And:{
        jj_consume_token(And);
        break;
        }
      case Or:{
        jj_consume_token(Or);
        break;
        }
      case AndAnd:{
        jj_consume_token(AndAnd);
        break;
        }
      case OrOr:{
        jj_consume_token(OrOr);
        break;
        }
      case Shl:{
        jj_consume_token(Shl);
        break;
        }
      case Shr:{
        jj_consume_token(Shr);
        break;
        }
      case PlusEq:{
        jj_consume_token(PlusEq);
        break;
        }
      case MinusEq:{
        jj_consume_token(MinusEq);
        break;
        }
      case StarEq:{
        jj_consume_token(StarEq);
        break;
        }
      case SlashEq:{
        jj_consume_token(SlashEq);
        break;
        }
      case CaretEq:{
        jj_consume_token(CaretEq);
        break;
        }
      case AndEq:{
        jj_consume_token(AndEq);
        break;
        }
      case OrEq:{
        jj_consume_token(OrEq);
        break;
        }
      case ShlEq:{
        jj_consume_token(ShlEq);
        break;
        }
      case ShrEq:{
        jj_consume_token(ShrEq);
        break;
        }
      case Eq:{
        jj_consume_token(Eq);
        break;
        }
      case EqEq:{
        jj_consume_token(EqEq);
        break;
        }
      case Ne:{
        jj_consume_token(Ne);
        break;
        }
      case Lt:{
        jj_consume_token(Lt);
        break;
        }
      case Le:{
        jj_consume_token(Le);
        break;
        }
      case Gt:{
        jj_consume_token(Gt);
        break;
        }
      case Ge:{
        jj_consume_token(Ge);
        break;
        }
      case At:{
        jj_consume_token(At);
        break;
        }
      case Underscore:{
        jj_consume_token(Underscore);
        break;
        }
      case Dot:{
        jj_consume_token(Dot);
        break;
        }
      case DotDot:{
        jj_consume_token(DotDot);
        break;
        }
      case DotDotDot:{
        jj_consume_token(DotDotDot);
        break;
        }
      case DotDotEq:{
        jj_consume_token(DotDotEq);
        break;
        }
      case Comma:{
        jj_consume_token(Comma);
        break;
        }
      case Semi:{
        jj_consume_token(Semi);
        break;
        }
      case Colon:{
        jj_consume_token(Colon);
        break;
        }
      case PathSep:{
        jj_consume_token(PathSep);
        break;
        }
      case RArrow:{
        jj_consume_token(RArrow);
        break;
        }
      case FatArrow:{
        jj_consume_token(FatArrow);
        break;
        }
      case Pound:{
        jj_consume_token(Pound);
        break;
        }
      case Dollar:{
        jj_consume_token(Dollar);
        break;
        }
      case Question:{
        jj_consume_token(Question);
        break;
        }
      case Tile:{
        jj_consume_token(Tile);
        break;
        }
      case KW_AS:{
        jj_consume_token(KW_AS);
        break;
        }
      case KW_BREAK:{
        jj_consume_token(KW_BREAK);
        break;
        }
      case KW_CONST:{
        jj_consume_token(KW_CONST);
        break;
        }
      case KW_CONTINUE:{
        jj_consume_token(KW_CONTINUE);
        break;
        }
      case KW_CRATE:{
        jj_consume_token(KW_CRATE);
        break;
        }
      case KW_ELSE:{
        jj_consume_token(KW_ELSE);
        break;
        }
      case KW_ENUM:{
        jj_consume_token(KW_ENUM);
        break;
        }
      case KW_EXTERN:{
        jj_consume_token(KW_EXTERN);
        break;
        }
      case KW_FALSE:{
        jj_consume_token(KW_FALSE);
        break;
        }
      case KW_FN:{
        jj_consume_token(KW_FN);
        break;
        }
      case KW_FOR:{
        jj_consume_token(KW_FOR);
        break;
        }
      case KW_IF:{
        jj_consume_token(KW_IF);
        break;
        }
      case KW_IMPL:{
        jj_consume_token(KW_IMPL);
        break;
        }
      case KW_IN:{
        jj_consume_token(KW_IN);
        break;
        }
      case KW_LET:{
        jj_consume_token(KW_LET);
        break;
        }
      case KW_LOOP:{
        jj_consume_token(KW_LOOP);
        break;
        }
      case KW_MATCH:{
        jj_consume_token(KW_MATCH);
        break;
        }
      case KW_MOD:{
        jj_consume_token(KW_MOD);
        break;
        }
      case KW_MOVE:{
        jj_consume_token(KW_MOVE);
        break;
        }
      case KW_MUT:{
        jj_consume_token(KW_MUT);
        break;
        }
      case KW_PUB:{
        jj_consume_token(KW_PUB);
        break;
        }
      case KW_REF:{
        jj_consume_token(KW_REF);
        break;
        }
      case KW_RETURN:{
        jj_consume_token(KW_RETURN);
        break;
        }
      case KW_SELFVALUE:{
        jj_consume_token(KW_SELFVALUE);
        break;
        }
      case KW_SELFTYPE:{
        jj_consume_token(KW_SELFTYPE);
        break;
        }
      case KW_STATIC:{
        jj_consume_token(KW_STATIC);
        break;
        }
      case KW_STRUCT:{
        jj_consume_token(KW_STRUCT);
        break;
        }
      case KW_SUPER:{
        jj_consume_token(KW_SUPER);
        break;
        }
      case KW_TRAIT:{
        jj_consume_token(KW_TRAIT);
        break;
        }
      case KW_TRUE:{
        jj_consume_token(KW_TRUE);
        break;
        }
      case KW_TYPE:{
        jj_consume_token(KW_TYPE);
        break;
        }
      case KW_UNSAFE:{
        jj_consume_token(KW_UNSAFE);
        break;
        }
      case KW_USE:{
        jj_consume_token(KW_USE);
        break;
        }
      case KW_WHERE:{
        jj_consume_token(KW_WHERE);
        break;
        }
      case KW_WHILE:{
        jj_consume_token(KW_WHILE);
        break;
        }
      case KW_ASYNC:{
        jj_consume_token(KW_ASYNC);
        break;
        }
      case KW_AWAIT:{
        jj_consume_token(KW_AWAIT);
        break;
        }
      case KW_DYN:{
        jj_consume_token(KW_DYN);
        break;
        }
      case KW_UNION:{
        jj_consume_token(KW_UNION);
        break;
        }
      case KW_STATICLIFETIME:{
        jj_consume_token(KW_STATICLIFETIME);
        break;
        }
      case KW_ABSTRACT:{
        jj_consume_token(KW_ABSTRACT);
        break;
        }
      case KW_BECOME:{
        jj_consume_token(KW_BECOME);
        break;
        }
      case KW_BOX:{
        jj_consume_token(KW_BOX);
        break;
        }
      case KW_DO:{
        jj_consume_token(KW_DO);
        break;
        }
      case KW_FINAL:{
        jj_consume_token(KW_FINAL);
        break;
        }
      case KW_MACRO:{
        jj_consume_token(KW_MACRO);
        break;
        }
      case KW_OVERRIDE:{
        jj_consume_token(KW_OVERRIDE);
        break;
        }
      case KW_PRIV:{
        jj_consume_token(KW_PRIV);
        break;
        }
      case KW_TYPEOF:{
        jj_consume_token(KW_TYPEOF);
        break;
        }
      case KW_UNSIZED:{
        jj_consume_token(KW_UNSIZED);
        break;
        }
      case KW_VIRTUAL:{
        jj_consume_token(KW_VIRTUAL);
        break;
        }
      case KW_YIELD:{
        jj_consume_token(KW_YIELD);
        break;
        }
      case CurlyOpen:{
        jj_consume_token(CurlyOpen);
        break;
        }
      case CurlyClose:{
        jj_consume_token(CurlyClose);
        break;
        }
      case ParenOpen:{
        jj_consume_token(ParenOpen);
        break;
        }
      case ParenClose:{
        jj_consume_token(ParenClose);
        break;
        }
      case BracketOpen:{
        jj_consume_token(BracketOpen);
        break;
        }
      case BracketClose:{
        jj_consume_token(BracketClose);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public RustTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xffffc000,0xffffc000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0xffffffff,0xffffffff,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0xfffffe03,0xfffffe03,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0xbfffff,0xbfffff,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0xf2804ab8,0xf2804ab8,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x3,0x3,};
	}

  /** Constructor with InputStream. */
  public Rust(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Rust(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RustTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Rust(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RustTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RustTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Rust(RustTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RustTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[162];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 162; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
