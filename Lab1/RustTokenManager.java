/* RustTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. RustTokenManager.java */

/** Token Manager. */
public class RustTokenManager implements RustConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x10000000000000L) != 0L)
            return 12;
         if ((active0 & 0x180000000008000L) != 0L)
         {
            jjmatchedKind = 119;
            return 95;
         }
         if ((active0 & 0x1800000000L) != 0L)
         {
            jjmatchedKind = 119;
            return 5;
         }
         if ((active1 & 0x2001000L) != 0L)
            return 79;
         if ((active1 & 0x8000000000L) != 0L)
            return 246;
         if ((active0 & 0xfe6fffe7ffff7fe0L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 119;
            return 247;
         }
         return -1;
      case 1:
         if ((active0 & 0x8000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 1;
            }
            return 119;
         }
         if ((active0 & 0xfdedfffff57f0000L) != 0L || (active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 1;
            }
            return 247;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 13;
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x20200000a804000L) != 0L)
            return 247;
         return -1;
      case 2:
         if ((active0 & 0xfccfbff1647f8000L) != 0L || (active1 & 0x3L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 2;
            return 247;
         }
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x120400e91000000L) != 0L || (active1 & 0x4L) != 0L)
            return 247;
         return -1;
      case 3:
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x6000186124180000L) != 0L)
            return 247;
         if ((active0 & 0x9ccfa79040678000L) != 0L || (active1 & 0x3L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 3;
            }
            return 247;
         }
         return -1;
      case 4:
         if ((active0 & 0xd0c0219000220000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 4;
            return 247;
         }
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xc0f860040458000L) != 0L || (active1 & 0x2L) != 0L)
            return 247;
         return -1;
      case 5:
         if ((active0 & 0x3fe0L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 119;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x4080219000200000L) != 0L)
            return 247;
         if ((active0 & 0x9040000000020000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 5;
            return 247;
         }
         return -1;
      case 6:
         if ((active0 & 0x1040000000020000L) != 0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 6;
            return 247;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 247;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 35:
         return jjStopAtPos(0, 114);
      case 36:
         return jjStopAtPos(0, 115);
      case 37:
         return jjStopAtPos(0, 77);
      case 38:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8040000L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 158);
      case 41:
         return jjStopAtPos(0, 159);
      case 42:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 43:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 44:
         return jjStopAtPos(0, 108);
      case 45:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000800000L);
      case 46:
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000L);
      case 47:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 58:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000L);
      case 59:
         return jjStopAtPos(0, 109);
      case 60:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x820100000L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000100000000L);
      case 62:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2040200000L);
      case 63:
         return jjStopAtPos(0, 116);
      case 64:
         return jjStopAtPos(0, 102);
      case 91:
         return jjStopAtPos(0, 160);
      case 93:
         return jjStopAtPos(0, 161);
      case 94:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 103, 246);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x46000000004000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x180000000008000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x70000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x220000000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x380000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000001c00000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x30000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000003c0000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000400000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3e000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40001c0000000000L, 0x4L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x8008600000003fe0L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 123:
         return jjStopAtPos(0, 156);
      case 124:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10080000L);
      case 125:
         return jjStopAtPos(0, 157);
      case 126:
         return jjStopAtPos(0, 117);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fe0L, active1, 0L);
      case 46:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000000000L);
      case 58:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      case 60:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000L);
      case 61:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 101);
         break;
      case 62:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000040400000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80007810000000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 247);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0x3L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 247);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 247);
         return jjMoveStringLiteralDfa2_0(active0, 0x8008200000100000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 57, 247);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000001a1030000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000c0000048000L, active1, 0x4L);
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x12400000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20600000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4020100000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 106);
         break;
      case 48:
         return jjMoveStringLiteralDfa3_0(active0, 0x3e0L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c00L, active1, 0L);
      case 61:
         if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 93);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 94);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 107);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4048000040000L, active1, 0L);
      case 66:
      case 98:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 247);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 247);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 247);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000800000008000L, active1, 0x2L);
      case 70:
      case 102:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 247);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2009000000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000400000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 247);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000030000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000120004000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 247);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x1L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040200000080000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 247);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 247);
         return jjMoveStringLiteralDfa3_0(active0, 0x10001040200000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000100000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 56, 247);
         break;
      case 89:
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 247);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa4_0(active0, 0x3fe0L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x410200000008000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 247);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 247);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 247);
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000020000200000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8004040000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 247);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x2L);
      case 77:
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 247);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x88000000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 247);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800800000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x410000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40008000060000L, active1, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x11000000000L, active1, 0L);
      case 86:
      case 118:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 247);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa5_0(active0, 0xce0L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0x3100L, active1, 0L);
      case 56:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 247);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 247);
         break;
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 247);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 247);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 247);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 247);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 72:
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 247);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000020000L, active1, 0L);
      case 75:
      case 107:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 247);
         break;
      case 76:
      case 108:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 247);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 247);
         break;
      case 79:
      case 111:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 247);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 247);
         return jjMoveStringLiteralDfa5_0(active0, 0x1040001000200000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 247);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 247);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 247);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(5, 8);
         break;
      case 53:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         break;
      case 56:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(5, 12);
         break;
      case 57:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x1L);
      case 66:
      case 98:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         break;
      case 67:
      case 99:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 247);
         break;
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 247);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 247);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 247);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 247);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 247);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 247);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(6, 52);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 63, 247);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 247);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 247);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 247);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 247);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 246;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAdd(13); }
                  else if (curChar == 39)
                  {
                     if (kind > 131)
                        kind = 131;
                     { jjAddStates(0, 1); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2, 6); }
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 35)
                     { jjAddStates(7, 8); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(120, 121); }
                  else if (curChar == 33)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 39)
                     { jjAddStates(12, 13); }
                  else if (curChar == 33)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 142)
                        kind = 142;
                     { jjCheckNAddStates(14, 26); }
                  }
                  else if (curChar == 47)
                     { jjCheckNAddStates(27, 29); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(30, 35); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(36, 40); }
                  if (curChar == 48)
                     { jjAddStates(41, 53); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAddStates(54, 57); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(64, 65); }
                  else if (curChar == 33)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  if (curChar == 35)
                     { jjAddStates(58, 59); }
                  break;
               case 246:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(4, 2); }
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  break;
               case 79:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 90;
                  else if (curChar == 42)
                     { jjCheckNAddStates(60, 62); }
                  if (curChar == 47)
                     { jjAddStates(63, 64); }
                  break;
               case 247:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 119)
                        kind = 119;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 33 && kind > 119)
                     kind = 119;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(4, 2); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 39)
                     { jjCheckNAddStates(36, 40); }
                  break;
               case 13:
                  if (curChar != 39)
                     break;
                  if (kind > 131)
                     kind = 131;
                  { jjAddStates(0, 1); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 39)
                     { jjCheckNAdd(13); }
                  break;
               case 21:
                  if (curChar == 34)
                     { jjCheckNAdd(13); }
                  break;
               case 22:
                  if (curChar == 48)
                     { jjCheckNAdd(13); }
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(2, 6); }
                  break;
               case 35:
               case 50:
                  if (curChar == 34)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 36:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(65, 70); }
                  break;
               case 39:
                  if (curChar != 34)
                     break;
                  if (kind > 132)
                     kind = 132;
                  { jjAddStates(71, 72); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 10)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  break;
               case 49:
                  if (curChar == 39)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 51:
                  if (curChar == 48)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 56:
                  if ((0xff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(78, 83); }
                  break;
               case 63:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 64:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 65:
                  if (curChar != 34)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAddTwoStates(66, 68); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if (curChar == 35)
                     { jjCheckNAddStates(54, 57); }
                  break;
               case 71:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 72:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(71, 74); }
                  break;
               case 74:
                  if (curChar != 35)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAddTwoStates(66, 68); }
                  break;
               case 75:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 76:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(76, 77); }
                  break;
               case 77:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(75, 74); }
                  break;
               case 78:
                  if (curChar == 47)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 80:
                  if ((0xffff7ffdfffffbffL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(81); }
                  break;
               case 81:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(81); }
                  break;
               case 82:
                  if (curChar != 47)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(81); }
                  break;
               case 83:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 42)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 85:
                  if ((0xfffffbfdffffffffL & l) != 0L)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 86:
                  if (curChar == 10)
                     { jjCheckNAddStates(60, 62); }
                  break;
               case 87:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(84, 89); }
                  break;
               case 89:
                  if (curChar == 47 && kind > 123)
                     kind = 123;
                  break;
               case 90:
                  if (curChar != 47)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0xffff7fffffffffffL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAdd(92); }
                  break;
               case 92:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAdd(92); }
                  break;
               case 93:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 96:
                  { jjCheckNAdd(97); }
                  break;
               case 97:
                  if (curChar != 39)
                     break;
                  if (kind > 135)
                     kind = 135;
                  { jjAddStates(84, 85); }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 106:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 107:
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 108:
                  if (curChar != 34)
                     break;
                  if (kind > 137)
                     kind = 137;
                  { jjAddStates(86, 87); }
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 10)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 120:
                  { jjCheckNAddTwoStates(120, 121); }
                  break;
               case 121:
                  if (curChar != 34)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAddTwoStates(122, 124); }
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if (curChar == 35)
                     { jjAddStates(7, 8); }
                  break;
               case 127:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(128, 129); }
                  break;
               case 128:
                  { jjCheckNAddTwoStates(128, 129); }
                  break;
               case 129:
               case 133:
                  if (curChar == 34)
                     { jjCheckNAdd(130); }
                  break;
               case 130:
                  if (curChar != 35)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAddTwoStates(122, 124); }
                  break;
               case 131:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 132:
                  { jjCheckNAddTwoStates(132, 133); }
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(14, 26); }
                  break;
               case 135:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(88, 90); }
                  break;
               case 137:
                  if (curChar == 56 && kind > 142)
                     kind = 142;
                  break;
               case 138:
                  if (curChar == 54 && kind > 142)
                     kind = 142;
                  break;
               case 139:
               case 151:
                  if (curChar == 49)
                     { jjCheckNAdd(138); }
                  break;
               case 140:
                  if (curChar == 50 && kind > 142)
                     kind = 142;
                  break;
               case 141:
               case 152:
                  if (curChar == 51)
                     { jjCheckNAdd(140); }
                  break;
               case 142:
                  if (curChar == 52 && kind > 142)
                     kind = 142;
                  break;
               case 143:
               case 153:
                  if (curChar == 54)
                     { jjCheckNAdd(142); }
                  break;
               case 144:
               case 154:
                  if (curChar == 50)
                     { jjCheckNAdd(137); }
                  break;
               case 145:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 155:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(159, 160); }
                  break;
               case 160:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 161:
                  if ((0xffffbfffffffffffL & l) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(162, 163); }
                  break;
               case 163:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 164:
               case 165:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAddTwoStates(165, 166); }
                  break;
               case 167:
                  if (curChar == 50 && kind > 151)
                     kind = 151;
                  break;
               case 168:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 52 && kind > 151)
                     kind = 151;
                  break;
               case 170:
                  if (curChar == 54)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(91, 93); }
                  break;
               case 172:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 173:
               case 174:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(174, 175); }
                  break;
               case 176:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(177, 178); }
                  break;
               case 177:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(177, 178); }
                  break;
               case 178:
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAddStates(94, 96); }
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(97, 99); }
                  break;
               case 185:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 186:
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(187, 188); }
                  break;
               case 189:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 190:
               case 245:
                  if ((0xfc00ffffffffffffL & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 191:
                  if (curChar == 48)
                     { jjAddStates(41, 53); }
                  break;
               case 193:
                  if ((0x3000000000000L & l) != 0L)
                     { jjAddStates(100, 101); }
                  break;
               case 194:
               case 195:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(102, 104); }
                  break;
               case 197:
                  if ((0xff000000000000L & l) != 0L)
                     { jjAddStates(105, 106); }
                  break;
               case 198:
               case 199:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(107, 109); }
                  break;
               case 201:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(110, 111); }
                  break;
               case 202:
               case 203:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(112, 114); }
                  break;
               case 205:
                  if ((0x3000000000000L & l) != 0L)
                     { jjAddStates(115, 116); }
                  break;
               case 206:
               case 207:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(207, 208); }
                  break;
               case 208:
                  if ((0x3fc000000000000L & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 210:
                  if ((0xff000000000000L & l) != 0L)
                     { jjAddStates(117, 118); }
                  break;
               case 211:
               case 212:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(212, 213); }
                  break;
               case 213:
                  if ((0x300000000000000L & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 215:
                  if ((0x3000000000000L & l) != 0L)
                     { jjAddStates(119, 120); }
                  break;
               case 216:
               case 217:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(217, 218); }
                  break;
               case 218:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 219;
                  break;
               case 219:
                  if ((0xffffbfffffffffffL & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 221:
                  if ((0xff000000000000L & l) != 0L)
                     { jjAddStates(121, 122); }
                  break;
               case 222:
               case 223:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(223, 218); }
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(123, 124); }
                  break;
               case 226:
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(227, 218); }
                  break;
               case 229:
                  if ((0x3000000000000L & l) != 0L)
                     { jjAddStates(125, 126); }
                  break;
               case 230:
               case 231:
                  if ((0x3000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(231, 232); }
                  break;
               case 234:
                  if ((0xff000000000000L & l) != 0L)
                     { jjAddStates(127, 128); }
                  break;
               case 235:
               case 236:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(236, 232); }
                  break;
               case 239:
                  if ((0xfffcffffffffffffL & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 242:
                  if ((0xff00ffffffffffffL & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  { jjCheckNAdd(13); }
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(2, 6); }
                  else if (curChar == 92)
                     { jjAddStates(129, 136); }
                  else if (curChar == 125)
                     { jjCheckNAdd(13); }
                  break;
               case 119:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 95:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(137, 138); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  if ((0x400000004L & l) != 0L)
                     { jjAddStates(139, 141); }
                  else if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(142, 143); }
                  else if (curChar == 95)
                     { jjCheckNAdd(4); }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 246:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(4, 2); }
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     { jjCheckNAddTwoStates(1, 2); }
                  }
                  break;
               case 247:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 3:
                  if (curChar == 95)
                     { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAddTwoStates(4, 2); }
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if (curChar == 95)
                     { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 14:
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if (curChar == 95)
                     { jjCheckNAdd(17); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  { jjCheckNAdd(17); }
                  break;
               case 18:
                  if (curChar == 125)
                     { jjCheckNAdd(13); }
                  break;
               case 19:
                  if (curChar == 92)
                     { jjAddStates(129, 136); }
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 24:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 25:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 26:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(13); }
                  break;
               case 29:
                  if (curChar == 123)
                     { jjCheckNAddTwoStates(30, 13); }
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if (curChar == 95)
                     { jjCheckNAdd(13); }
                  break;
               case 32:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(2, 6); }
                  break;
               case 34:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 36:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(65, 70); }
                  break;
               case 37:
                  if (curChar == 92)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 38:
                  if (curChar == 125)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 40:
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if (curChar == 95)
                     { jjCheckNAdd(43); }
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  { jjCheckNAdd(43); }
                  break;
               case 44:
                  if (curChar == 92)
                     { jjCheckNAddStates(144, 152); }
                  break;
               case 46:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  break;
               case 47:
                  if (curChar == 95)
                     { jjCheckNAdd(38); }
                  break;
               case 48:
                  if (curChar == 95)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 52:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 53:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 54:
                  if ((0x400000004000L & l) != 0L)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 55:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(30, 35); }
                  break;
               case 58:
                  if (curChar == 123)
                     { jjCheckNAddStates(153, 158); }
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(78, 83); }
                  break;
               case 60:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if (curChar == 92)
                     { jjCheckNAddStates(159, 168); }
                  break;
               case 62:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(142, 143); }
                  break;
               case 64:
                  { jjAddStates(169, 170); }
                  break;
               case 66:
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAdd(67); }
                  break;
               case 68:
                  if (curChar == 95)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  { jjCheckNAdd(69); }
                  break;
               case 72:
                  { jjAddStates(171, 172); }
                  break;
               case 76:
                  { jjAddStates(173, 174); }
                  break;
               case 80:
               case 81:
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(81); }
                  break;
               case 85:
                  { jjAddStates(60, 62); }
                  break;
               case 91:
               case 92:
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAdd(92); }
                  break;
               case 94:
                  if ((0x400000004L & l) != 0L)
                     { jjAddStates(139, 141); }
                  break;
               case 96:
                  { jjCheckNAdd(97); }
                  break;
               case 98:
               case 99:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  { jjCheckNAdd(99); }
                  break;
               case 100:
                  if (curChar == 95)
                     { jjCheckNAdd(101); }
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  { jjCheckNAdd(101); }
                  break;
               case 102:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAdd(97); }
                  break;
               case 105:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 107:
                  { jjCheckNAddStates(9, 11); }
                  break;
               case 109:
               case 110:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  { jjCheckNAdd(110); }
                  break;
               case 111:
                  if (curChar == 95)
                     { jjCheckNAdd(112); }
                  break;
               case 112:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  { jjCheckNAdd(112); }
                  break;
               case 113:
                  if (curChar == 92)
                     { jjAddStates(175, 176); }
                  break;
               case 115:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 118:
                  if ((0x4000000040000L & l) != 0L)
                     { jjAddStates(137, 138); }
                  break;
               case 120:
                  { jjAddStates(177, 178); }
                  break;
               case 122:
               case 123:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(123); }
                  break;
               case 124:
                  if (curChar == 95)
                     { jjCheckNAdd(125); }
                  break;
               case 125:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  { jjCheckNAdd(125); }
                  break;
               case 128:
                  { jjAddStates(179, 180); }
                  break;
               case 132:
                  { jjAddStates(181, 182); }
                  break;
               case 135:
                  if (curChar != 95)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(88, 90); }
                  break;
               case 136:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAddStates(183, 188); }
                  break;
               case 146:
                  if ((0x2000000020L & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 147:
               case 156:
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 148:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if ((0x20000000200L & l) != 0L)
                     { jjCheckNAddStates(189, 194); }
                  break;
               case 157:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 95)
                     { jjAddStates(195, 196); }
                  break;
               case 161:
                  if ((0xf800000178000001L & l) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 162:
                  if (curChar == 95)
                     { jjAddStates(197, 198); }
                  break;
               case 165:
                  if (curChar != 95)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjAddStates(199, 200); }
                  break;
               case 166:
                  if ((0x4000000040L & l) != 0L)
                     { jjAddStates(201, 202); }
                  break;
               case 171:
                  if (curChar == 95)
                     { jjCheckNAddStates(91, 93); }
                  break;
               case 174:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(174, 175); }
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(203, 205); }
                  break;
               case 177:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(177, 178); }
                  break;
               case 179:
                  if (curChar != 95)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjAddStates(94, 96); }
                  break;
               case 180:
               case 181:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAdd(181); }
                  break;
               case 182:
                  if (curChar == 95)
                     { jjCheckNAdd(183); }
                  break;
               case 183:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 151)
                     kind = 151;
                  { jjCheckNAdd(183); }
                  break;
               case 184:
                  if (curChar == 95)
                     { jjCheckNAddStates(97, 99); }
                  break;
               case 187:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(187, 188); }
                  break;
               case 188:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(206, 207); }
                  break;
               case 190:
               case 239:
               case 242:
                  if (kind > 153)
                     kind = 153;
                  break;
               case 192:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(193, 194); }
                  break;
               case 193:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(193, 194); }
                  break;
               case 195:
                  if (curChar != 95)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(102, 104); }
                  break;
               case 196:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(197, 198); }
                  break;
               case 197:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(197, 198); }
                  break;
               case 199:
                  if (curChar != 95)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(107, 109); }
                  break;
               case 200:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 201:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(201, 202); }
                  break;
               case 202:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(112, 114); }
                  break;
               case 203:
                  if ((0x7e8000007eL & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  { jjCheckNAddStates(112, 114); }
                  break;
               case 204:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(205, 206); }
                  break;
               case 205:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(205, 206); }
                  break;
               case 207:
                  if (curChar == 95)
                     { jjAddStates(208, 209); }
                  break;
               case 209:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(210, 211); }
                  break;
               case 210:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(210, 211); }
                  break;
               case 212:
                  if (curChar == 95)
                     { jjAddStates(210, 211); }
                  break;
               case 214:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(215, 216); }
                  break;
               case 215:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(215, 216); }
                  break;
               case 217:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(217, 218); }
                  break;
               case 219:
                  if ((0xffffffff7fffffffL & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 220:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(221, 222); }
                  break;
               case 221:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(221, 222); }
                  break;
               case 223:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(223, 218); }
                  break;
               case 224:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(225, 226); }
                  break;
               case 225:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(225, 226); }
                  break;
               case 226:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(227, 218); }
                  break;
               case 227:
                  if ((0x7e8000007eL & l) != 0L)
                     { jjCheckNAddTwoStates(227, 218); }
                  break;
               case 228:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(229, 230); }
                  break;
               case 229:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(229, 230); }
                  break;
               case 231:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(231, 232); }
                  break;
               case 232:
                  if ((0x2000000020L & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 233:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(234, 235); }
                  break;
               case 234:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(234, 235); }
                  break;
               case 236:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(236, 232); }
                  break;
               case 237:
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAddTwoStates(238, 239); }
                  break;
               case 238:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(238, 239); }
                  break;
               case 240:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAddTwoStates(241, 242); }
                  break;
               case 241:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(241, 242); }
                  break;
               case 243:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAddTwoStates(244, 245); }
                  break;
               case 244:
                  if (curChar == 95)
                     { jjCheckNAddTwoStates(244, 245); }
                  break;
               case 245:
                  if ((0xffffff81ffffff81L & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 36:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(65, 70); }
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(169, 170); }
                  break;
               case 72:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(171, 172); }
                  break;
               case 76:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(173, 174); }
                  break;
               case 80:
               case 81:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  { jjCheckNAdd(81); }
                  break;
               case 85:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(60, 62); }
                  break;
               case 91:
               case 92:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  { jjCheckNAdd(92); }
                  break;
               case 107:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               case 161:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 151)
                     kind = 151;
                  break;
               case 190:
               case 219:
               case 239:
               case 242:
               case 245:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 153)
                     kind = 153;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 246 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\53", "\55", "\52", "\57", "\45", "\136", "\41", "\46", 
"\174", "\46\46", "\174\174", "\74\74", "\76\76", "\53\75", "\55\75", "\52\75", 
"\57\75", "\136\75", "\46\75", "\174\75", "\74\74\75", "\76\76\75", "\75", "\75\75", 
"\41\75", "\74", "\74\75", "\76", "\76\75", "\100", "\137", "\56", "\56\56", 
"\56\56\56", "\56\56\75", "\54", "\73", "\72", "\72\72", "\55\76", "\75\76", "\43", "\44", 
"\77", "\176", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\173", 
"\175", "\50", "\51", "\133", "\135", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   14, 16, 34, 31, 31, 31, 31, 127, 131, 107, 108, 113, 96, 105, 135, 159, 
   160, 162, 163, 171, 172, 175, 184, 185, 188, 136, 150, 79, 84, 93, 36, 37, 
   38, 39, 44, 46, 12, 18, 13, 19, 33, 192, 196, 200, 204, 209, 214, 220, 
   224, 228, 233, 237, 240, 243, 71, 74, 75, 74, 6, 8, 85, 87, 88, 80, 
   83, 36, 37, 38, 39, 46, 61, 40, 42, 47, 48, 48, 48, 48, 47, 48, 
   48, 48, 48, 48, 98, 100, 109, 111, 135, 136, 150, 171, 172, 175, 179, 180, 
   182, 184, 185, 188, 193, 194, 195, 136, 150, 197, 198, 199, 136, 150, 201, 202, 
   203, 136, 150, 205, 206, 210, 211, 215, 216, 221, 222, 225, 226, 229, 230, 234, 
   235, 20, 21, 22, 23, 24, 25, 26, 32, 119, 126, 95, 106, 118, 63, 70, 
   45, 49, 50, 51, 52, 53, 54, 55, 60, 36, 37, 38, 39, 44, 59, 45, 
   45, 49, 50, 51, 52, 53, 54, 55, 60, 64, 65, 72, 73, 76, 77, 114, 
   115, 120, 121, 128, 129, 132, 133, 137, 139, 141, 143, 145, 149, 137, 151, 152, 
   153, 155, 158, 159, 160, 162, 163, 165, 166, 168, 170, 176, 177, 178, 189, 190, 
   207, 208, 212, 213, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("KW_AS " + image);
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_BREAK " + image);
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_CONST " + image);
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("KW_CONTINUE " + image);
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_CRATE " + image);
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_ELSE " + image);
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_ENUM " + image);
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("KW_EXTERN: " + image);
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_FALSE " + image);
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    System.out.println("KW_FN " + image);
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_FOR " + image);
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    System.out.println("KW_IF " + image);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_IMPL " + image);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    System.out.println("KW_IN " + image);
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_LET " + image);
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_LOOP " + image);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_MATCH " + image);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_MOD " + image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_MOVE " + image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_MUT " + image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_PUB " + image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_REF " + image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("KW_RETURN " + image);
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("KW_SELFVALUE " + image);
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("KW_SELFTYPE " + image);
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("KW_STATIC " + image);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("KW_STRUCT " + image);
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_SUPER " + image);
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_TRAIT " + image);
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_TRUE " + image);
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("KW_TYPE " + image);
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("KW_UNSAFE " + image);
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("KW_USE " + image);
         break;
      case 47 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_WHERE " + image);
         break;
      case 48 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("KW_WHILE " + image);
         break;
      case 49 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_ASYNC " + image);
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_AWAIT " + image);
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_UNION " + image);
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println("KW_STATICLIFETIME " + image);
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("KW_DYN " + image);
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("KW_ABSTRACT " + image);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("KW_BECOME " + image);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("KW_BOX " + image);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                   System.out.println("KW_DO " + image);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_FINAL " + image);
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_MACRO " + image);
         break;
      case 60 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("KW_OVERRIDE " + image);
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("KW_PRIV " + image);
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("KW_TYPEOF " + image);
         break;
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("KW_UNSIZED " + image);
         break;
      case 64 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("KW_VIRTUAL " + image);
         break;
      case 65 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("KW_YIELD " + image);
         break;
      case 66 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                     System.out.println("KW_TRY " + image);
         break;
      case 73 :
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                System.out.println("+ " + image);
         break;
      case 74 :
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                  System.out.println("- " + image);
         break;
      case 75 :
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                 System.out.println("* " + image);
         break;
      case 76 :
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                  System.out.println("/ " + image);
         break;
      case 77 :
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                    System.out.println("% " + image);
         break;
      case 78 :
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                  System.out.println("CARET " + image);
         break;
      case 79 :
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                System.out.println("! " + image);
         break;
      case 80 :
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                System.out.println("AND " + image);
         break;
      case 81 :
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
               System.out.println("OR " + image);
         break;
      case 82 :
        image.append(jjstrLiteralImages[82]);
        lengthOfMatch = jjstrLiteralImages[82].length();
                    System.out.println("&& " + image);
         break;
      case 83 :
        image.append(jjstrLiteralImages[83]);
        lengthOfMatch = jjstrLiteralImages[83].length();
                  System.out.println("|| " + image);
         break;
      case 84 :
        image.append(jjstrLiteralImages[84]);
        lengthOfMatch = jjstrLiteralImages[84].length();
                 System.out.println("SHL " + image);
         break;
      case 85 :
        image.append(jjstrLiteralImages[85]);
        lengthOfMatch = jjstrLiteralImages[85].length();
                 System.out.println("SHR " + image);
         break;
      case 86 :
        image.append(jjstrLiteralImages[86]);
        lengthOfMatch = jjstrLiteralImages[86].length();
                    System.out.println("PLUSEQ " + image);
         break;
      case 87 :
        image.append(jjstrLiteralImages[87]);
        lengthOfMatch = jjstrLiteralImages[87].length();
                     System.out.println("MINUSEQ " + image);
         break;
      case 88 :
        image.append(jjstrLiteralImages[88]);
        lengthOfMatch = jjstrLiteralImages[88].length();
                    System.out.println("STAREQ " + image);
         break;
      case 89 :
        image.append(jjstrLiteralImages[89]);
        lengthOfMatch = jjstrLiteralImages[89].length();
                     System.out.println("SLASHEQ " + image);
         break;
      case 90 :
        image.append(jjstrLiteralImages[90]);
        lengthOfMatch = jjstrLiteralImages[90].length();
                     System.out.println("CARETEQ " + image);
         break;
      case 91 :
        image.append(jjstrLiteralImages[91]);
        lengthOfMatch = jjstrLiteralImages[91].length();
                   System.out.println("ANDEQ " + image);
         break;
      case 92 :
        image.append(jjstrLiteralImages[92]);
        lengthOfMatch = jjstrLiteralImages[92].length();
                  System.out.println("OREQ " + image);
         break;
      case 93 :
        image.append(jjstrLiteralImages[93]);
        lengthOfMatch = jjstrLiteralImages[93].length();
                    System.out.println("SHLEQ " + image);
         break;
      case 94 :
        image.append(jjstrLiteralImages[94]);
        lengthOfMatch = jjstrLiteralImages[94].length();
                    System.out.println("SHREQ " + image);
         break;
      case 95 :
        image.append(jjstrLiteralImages[95]);
        lengthOfMatch = jjstrLiteralImages[95].length();
               System.out.println("= " + image);
         break;
      case 96 :
        image.append(jjstrLiteralImages[96]);
        lengthOfMatch = jjstrLiteralImages[96].length();
                  System.out.println("== " + image);
         break;
      case 97 :
        image.append(jjstrLiteralImages[97]);
        lengthOfMatch = jjstrLiteralImages[97].length();
                System.out.println("!= " + image);
         break;
      case 98 :
        image.append(jjstrLiteralImages[98]);
        lengthOfMatch = jjstrLiteralImages[98].length();
               System.out.println("< " + image);
         break;
      case 99 :
        image.append(jjstrLiteralImages[99]);
        lengthOfMatch = jjstrLiteralImages[99].length();
                System.out.println("<= " + image);
         break;
      case 100 :
        image.append(jjstrLiteralImages[100]);
        lengthOfMatch = jjstrLiteralImages[100].length();
               System.out.println("> " + image);
         break;
      case 101 :
        image.append(jjstrLiteralImages[101]);
        lengthOfMatch = jjstrLiteralImages[101].length();
                System.out.println(">= " + image);
         break;
      case 102 :
        image.append(jjstrLiteralImages[102]);
        lengthOfMatch = jjstrLiteralImages[102].length();
                System.out.println("AT " + image);
         break;
      case 103 :
        image.append(jjstrLiteralImages[103]);
        lengthOfMatch = jjstrLiteralImages[103].length();
                       System.out.println("UNDERSCORE " + image);
         break;
      case 104 :
        image.append(jjstrLiteralImages[104]);
        lengthOfMatch = jjstrLiteralImages[104].length();
                 System.out.println("DOT " + image);
         break;
      case 105 :
        image.append(jjstrLiteralImages[105]);
        lengthOfMatch = jjstrLiteralImages[105].length();
                    System.out.println("DOTDOT " + image);
         break;
      case 106 :
        image.append(jjstrLiteralImages[106]);
        lengthOfMatch = jjstrLiteralImages[106].length();
                        System.out.println("DOTDOTDOT " + image);
         break;
      case 107 :
        image.append(jjstrLiteralImages[107]);
        lengthOfMatch = jjstrLiteralImages[107].length();
                       System.out.println("DOTDOTEQ " + image);
         break;
      case 108 :
        image.append(jjstrLiteralImages[108]);
        lengthOfMatch = jjstrLiteralImages[108].length();
                   System.out.println(", " + image);
         break;
      case 109 :
        image.append(jjstrLiteralImages[109]);
        lengthOfMatch = jjstrLiteralImages[109].length();
                  System.out.println("; " + image);
         break;
      case 110 :
        image.append(jjstrLiteralImages[110]);
        lengthOfMatch = jjstrLiteralImages[110].length();
                   System.out.println(": " + image);
         break;
      case 111 :
        image.append(jjstrLiteralImages[111]);
        lengthOfMatch = jjstrLiteralImages[111].length();
                     System.out.println(":: " + image);
         break;
      case 112 :
        image.append(jjstrLiteralImages[112]);
        lengthOfMatch = jjstrLiteralImages[112].length();
                    System.out.println("RARROW " + image);
         break;
      case 113 :
        image.append(jjstrLiteralImages[113]);
        lengthOfMatch = jjstrLiteralImages[113].length();
                      System.out.println("FATARROW " + image);
         break;
      case 114 :
        image.append(jjstrLiteralImages[114]);
        lengthOfMatch = jjstrLiteralImages[114].length();
                  System.out.println("POUND " + image);
         break;
      case 115 :
        image.append(jjstrLiteralImages[115]);
        lengthOfMatch = jjstrLiteralImages[115].length();
                   System.out.println("DOLLAR " + image);
         break;
      case 116 :
        image.append(jjstrLiteralImages[116]);
        lengthOfMatch = jjstrLiteralImages[116].length();
                      System.out.println("QUESTION " + image);
         break;
      case 117 :
        image.append(jjstrLiteralImages[117]);
        lengthOfMatch = jjstrLiteralImages[117].length();
                 System.out.println("TILDE " + image);
         break;
      case 119 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                   System.out.println("IDENTIFIER " + image);
         break;
      case 131 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                                System.out.println("CHAR_LITERAL " + image);
         break;
      case 132 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("STRING_LITERAL " + image);
         break;
      case 133 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                              System.out.println("RAW_STRING_LITERAL " + image);
         break;
      case 135 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                System.out.println("BYTE_LITERAL " + image);
         break;
      case 137 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                      System.out.println("BYTE_STRING_LITERAL " + image);
         break;
      case 139 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         System.out.println("RAW_BYTE_STRING_LITERAL " + image);
         break;
      case 142 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                                      System.out.println("INTEGER_LITERAL " + image);
         break;
      case 151 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                   System.out.println("FLOAT_LITERAL " + image);
         break;
      case 153 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                       System.out.println("RESERVED_NUMBER " + image);
         break;
      case 156 :
        image.append(jjstrLiteralImages[156]);
        lengthOfMatch = jjstrLiteralImages[156].length();
                     System.out.println("{ " + image);
         break;
      case 157 :
        image.append(jjstrLiteralImages[157]);
        lengthOfMatch = jjstrLiteralImages[157].length();
                       System.out.println("} " + image);
         break;
      case 158 :
        image.append(jjstrLiteralImages[158]);
        lengthOfMatch = jjstrLiteralImages[158].length();
                      System.out.println("( " + image);
         break;
      case 159 :
        image.append(jjstrLiteralImages[159]);
        lengthOfMatch = jjstrLiteralImages[159].length();
                       System.out.println(") " + image);
         break;
      case 160 :
        image.append(jjstrLiteralImages[160]);
        lengthOfMatch = jjstrLiteralImages[160].length();
                        System.out.println("[ " + image);
         break;
      case 161 :
        image.append(jjstrLiteralImages[161]);
        lengthOfMatch = jjstrLiteralImages[161].length();
                         System.out.println("] " + image);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public RustTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public RustTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 246; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffc001L, 0xbffffffffffe07L, 0x3f2804ab8L, 
};
static final long[] jjtoSkip = {
   0x3ffeL, 0x1c00000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1c00000000000000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[246];
    static private final int[] jjstateSet = new int[2 * 246];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
