/* Generated By:JavaCC: Do not edit this line. RustConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RustConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int KW_AS = 14;
  /** RegularExpression Id. */
  int KW_BREAK = 15;
  /** RegularExpression Id. */
  int KW_CONST = 16;
  /** RegularExpression Id. */
  int KW_CONTINUE = 17;
  /** RegularExpression Id. */
  int KW_CRATE = 18;
  /** RegularExpression Id. */
  int KW_ELSE = 19;
  /** RegularExpression Id. */
  int KW_ENUM = 20;
  /** RegularExpression Id. */
  int KW_EXTERN = 21;
  /** RegularExpression Id. */
  int KW_FALSE = 22;
  /** RegularExpression Id. */
  int KW_FN = 23;
  /** RegularExpression Id. */
  int KW_FOR = 24;
  /** RegularExpression Id. */
  int KW_IF = 25;
  /** RegularExpression Id. */
  int KW_IMPL = 26;
  /** RegularExpression Id. */
  int KW_IN = 27;
  /** RegularExpression Id. */
  int KW_LET = 28;
  /** RegularExpression Id. */
  int KW_LOOP = 29;
  /** RegularExpression Id. */
  int KW_MATCH = 30;
  /** RegularExpression Id. */
  int KW_MOD = 31;
  /** RegularExpression Id. */
  int KW_MOVE = 32;
  /** RegularExpression Id. */
  int KW_MUT = 33;
  /** RegularExpression Id. */
  int KW_PUB = 34;
  /** RegularExpression Id. */
  int KW_REF = 35;
  /** RegularExpression Id. */
  int KW_RETURN = 36;
  /** RegularExpression Id. */
  int KW_SELFVALUE = 37;
  /** RegularExpression Id. */
  int KW_SELFTYPE = 38;
  /** RegularExpression Id. */
  int KW_STATIC = 39;
  /** RegularExpression Id. */
  int KW_STRUCT = 40;
  /** RegularExpression Id. */
  int KW_SUPER = 41;
  /** RegularExpression Id. */
  int KW_TRAIT = 42;
  /** RegularExpression Id. */
  int KW_TRUE = 43;
  /** RegularExpression Id. */
  int KW_TYPE = 44;
  /** RegularExpression Id. */
  int KW_UNSAFE = 45;
  /** RegularExpression Id. */
  int KW_USE = 46;
  /** RegularExpression Id. */
  int KW_WHERE = 47;
  /** RegularExpression Id. */
  int KW_WHILE = 48;
  /** RegularExpression Id. */
  int KW_ASYNC = 49;
  /** RegularExpression Id. */
  int KW_AWAIT = 50;
  /** RegularExpression Id. */
  int KW_UNION = 51;
  /** RegularExpression Id. */
  int KW_STATICLIFETIME = 52;
  /** RegularExpression Id. */
  int KW_DYN = 53;
  /** RegularExpression Id. */
  int KW_ABSTRACT = 54;
  /** RegularExpression Id. */
  int KW_BECOME = 55;
  /** RegularExpression Id. */
  int KW_BOX = 56;
  /** RegularExpression Id. */
  int KW_DO = 57;
  /** RegularExpression Id. */
  int KW_FINAL = 58;
  /** RegularExpression Id. */
  int KW_MACRO = 59;
  /** RegularExpression Id. */
  int KW_OVERRIDE = 60;
  /** RegularExpression Id. */
  int KW_PRIV = 61;
  /** RegularExpression Id. */
  int KW_TYPEOF = 62;
  /** RegularExpression Id. */
  int KW_UNSIZED = 63;
  /** RegularExpression Id. */
  int KW_VIRTUAL = 64;
  /** RegularExpression Id. */
  int KW_YIELD = 65;
  /** RegularExpression Id. */
  int KW_TRY = 66;
  /** RegularExpression Id. */
  int XID_Start = 67;
  /** RegularExpression Id. */
  int XID_Continue = 68;
  /** RegularExpression Id. */
  int SUFFIX = 69;
  /** RegularExpression Id. */
  int SUFFIX_NO_E = 70;
  /** RegularExpression Id. */
  int SUFFIX_INTEGER = 71;
  /** RegularExpression Id. */
  int SUFFIX_FLOAT_POINT = 72;
  /** RegularExpression Id. */
  int Plus = 73;
  /** RegularExpression Id. */
  int Minus = 74;
  /** RegularExpression Id. */
  int Star = 75;
  /** RegularExpression Id. */
  int Slash = 76;
  /** RegularExpression Id. */
  int Percent = 77;
  /** RegularExpression Id. */
  int Caret = 78;
  /** RegularExpression Id. */
  int Not = 79;
  /** RegularExpression Id. */
  int And = 80;
  /** RegularExpression Id. */
  int Or = 81;
  /** RegularExpression Id. */
  int AndAnd = 82;
  /** RegularExpression Id. */
  int OrOr = 83;
  /** RegularExpression Id. */
  int Shl = 84;
  /** RegularExpression Id. */
  int Shr = 85;
  /** RegularExpression Id. */
  int PlusEq = 86;
  /** RegularExpression Id. */
  int MinusEq = 87;
  /** RegularExpression Id. */
  int StarEq = 88;
  /** RegularExpression Id. */
  int SlashEq = 89;
  /** RegularExpression Id. */
  int CaretEq = 90;
  /** RegularExpression Id. */
  int AndEq = 91;
  /** RegularExpression Id. */
  int OrEq = 92;
  /** RegularExpression Id. */
  int ShlEq = 93;
  /** RegularExpression Id. */
  int ShrEq = 94;
  /** RegularExpression Id. */
  int Eq = 95;
  /** RegularExpression Id. */
  int EqEq = 96;
  /** RegularExpression Id. */
  int Ne = 97;
  /** RegularExpression Id. */
  int Lt = 98;
  /** RegularExpression Id. */
  int Le = 99;
  /** RegularExpression Id. */
  int Gt = 100;
  /** RegularExpression Id. */
  int Ge = 101;
  /** RegularExpression Id. */
  int At = 102;
  /** RegularExpression Id. */
  int Underscore = 103;
  /** RegularExpression Id. */
  int Dot = 104;
  /** RegularExpression Id. */
  int DotDot = 105;
  /** RegularExpression Id. */
  int DotDotDot = 106;
  /** RegularExpression Id. */
  int DotDotEq = 107;
  /** RegularExpression Id. */
  int Comma = 108;
  /** RegularExpression Id. */
  int Semi = 109;
  /** RegularExpression Id. */
  int Colon = 110;
  /** RegularExpression Id. */
  int PathSep = 111;
  /** RegularExpression Id. */
  int RArrow = 112;
  /** RegularExpression Id. */
  int FatArrow = 113;
  /** RegularExpression Id. */
  int Pound = 114;
  /** RegularExpression Id. */
  int Dollar = 115;
  /** RegularExpression Id. */
  int Question = 116;
  /** RegularExpression Id. */
  int Tile = 117;
  /** RegularExpression Id. */
  int IDENTIFIER_OR_KEYWORD = 118;
  /** RegularExpression Id. */
  int IDENTIFIER = 119;
  /** RegularExpression Id. */
  int RAW_IDENTIFIER = 120;
  /** RegularExpression Id. */
  int NON_KEYWORD_IDENTIFIER = 121;
  /** RegularExpression Id. */
  int LINE_COMMENT = 122;
  /** RegularExpression Id. */
  int BLOCK_COMMENT = 123;
  /** RegularExpression Id. */
  int OUTER_LINE_DOC = 124;
  /** RegularExpression Id. */
  int IsolatedCR = 125;
  /** RegularExpression Id. */
  int ASCII_ESCAPE = 126;
  /** RegularExpression Id. */
  int BYTE_ESCAPE = 127;
  /** RegularExpression Id. */
  int UNICODE_ESCAPE = 128;
  /** RegularExpression Id. */
  int QUOTE_ESCAPE = 129;
  /** RegularExpression Id. */
  int STRING_CONTINUE = 130;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 131;
  /** RegularExpression Id. */
  int STRING_LITERAL = 132;
  /** RegularExpression Id. */
  int RAW_STRING_LITERAL = 133;
  /** RegularExpression Id. */
  int RAW_STRING_CONTENT = 134;
  /** RegularExpression Id. */
  int BYTE_LITERAL = 135;
  /** RegularExpression Id. */
  int ASCII_FOR_CHAR = 136;
  /** RegularExpression Id. */
  int BYTE_STRING_LITERAL = 137;
  /** RegularExpression Id. */
  int ASCII_FOR_STRING = 138;
  /** RegularExpression Id. */
  int RAW_BYTE_STRING_LITERAL = 139;
  /** RegularExpression Id. */
  int ASCII = 140;
  /** RegularExpression Id. */
  int RAW_BYTE_STRING_CONTENT = 141;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 142;
  /** RegularExpression Id. */
  int DEC_LITERAL = 143;
  /** RegularExpression Id. */
  int BIN_LITERAL = 144;
  /** RegularExpression Id. */
  int OCT_LITERAL = 145;
  /** RegularExpression Id. */
  int HEX_LITERAL = 146;
  /** RegularExpression Id. */
  int BIN_DIGIT = 147;
  /** RegularExpression Id. */
  int OCT_DIGIT = 148;
  /** RegularExpression Id. */
  int DEC_DIGIT = 149;
  /** RegularExpression Id. */
  int HEX_DIGIT = 150;
  /** RegularExpression Id. */
  int FLOAT_LITERAL = 151;
  /** RegularExpression Id. */
  int FLOAT_EXPONENT = 152;
  /** RegularExpression Id. */
  int RESERVED_NUMBER = 153;
  /** RegularExpression Id. */
  int LIFETIME_TOKEN = 154;
  /** RegularExpression Id. */
  int LIFETIME_OR_LABEL = 155;
  /** RegularExpression Id. */
  int CurlyOpen = 156;
  /** RegularExpression Id. */
  int CurlyClose = 157;
  /** RegularExpression Id. */
  int ParenOpen = 158;
  /** RegularExpression Id. */
  int ParenClose = 159;
  /** RegularExpression Id. */
  int BracketOpen = 160;
  /** RegularExpression Id. */
  int BracketClose = 161;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"U+000B\"",
    "\"U+000C\"",
    "\"U+000D\"",
    "\"U+0020\"",
    "\"U+0085\"",
    "\"U+200E\"",
    "\"U+200F\"",
    "\"U+2028\"",
    "\"U+2029\"",
    "\"as\"",
    "\"break\"",
    "\"const\"",
    "\"continue\"",
    "\"crate\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"false\"",
    "\"fn\"",
    "\"for\"",
    "\"if\"",
    "\"impl\"",
    "\"in\"",
    "\"let\"",
    "\"loop\"",
    "\"match\"",
    "\"mod\"",
    "\"move\"",
    "\"mut\"",
    "\"pub\"",
    "\"ref\"",
    "\"return\"",
    "\"self\"",
    "\"Self\"",
    "\"static\"",
    "\"struct\"",
    "\"super\"",
    "\"trait\"",
    "\"true\"",
    "\"type\"",
    "\"unsafe\"",
    "\"use\"",
    "\"where\"",
    "\"while\"",
    "\"async\"",
    "\"await\"",
    "\"union\"",
    "\"\\\'static\"",
    "\"dyn\"",
    "\"abstract\"",
    "\"become\"",
    "\"box\"",
    "\"do\"",
    "\"final\"",
    "\"macro\"",
    "\"override\"",
    "\"priv\"",
    "\"typeof\"",
    "\"unsized\"",
    "\"virtual\"",
    "\"yield\"",
    "\"try\"",
    "<XID_Start>",
    "<XID_Continue>",
    "<SUFFIX>",
    "<SUFFIX_NO_E>",
    "<SUFFIX_INTEGER>",
    "<SUFFIX_FLOAT_POINT>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"^\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"&&\"",
    "\"||\"",
    "\"<<\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"^=\"",
    "\"&=\"",
    "\"|=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"@\"",
    "\"_\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"..=\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"::\"",
    "\"->\"",
    "\"=>\"",
    "\"#\"",
    "\"$\"",
    "\"?\"",
    "\"~\"",
    "<IDENTIFIER_OR_KEYWORD>",
    "<IDENTIFIER>",
    "<RAW_IDENTIFIER>",
    "<NON_KEYWORD_IDENTIFIER>",
    "<LINE_COMMENT>",
    "<BLOCK_COMMENT>",
    "<OUTER_LINE_DOC>",
    "<IsolatedCR>",
    "<ASCII_ESCAPE>",
    "<BYTE_ESCAPE>",
    "<UNICODE_ESCAPE>",
    "<QUOTE_ESCAPE>",
    "\"\\\\\\n\"",
    "<CHAR_LITERAL>",
    "<STRING_LITERAL>",
    "<RAW_STRING_LITERAL>",
    "<RAW_STRING_CONTENT>",
    "<BYTE_LITERAL>",
    "<ASCII_FOR_CHAR>",
    "<BYTE_STRING_LITERAL>",
    "<ASCII_FOR_STRING>",
    "<RAW_BYTE_STRING_LITERAL>",
    "<ASCII>",
    "<RAW_BYTE_STRING_CONTENT>",
    "<INTEGER_LITERAL>",
    "<DEC_LITERAL>",
    "<BIN_LITERAL>",
    "<OCT_LITERAL>",
    "<HEX_LITERAL>",
    "<BIN_DIGIT>",
    "<OCT_DIGIT>",
    "<DEC_DIGIT>",
    "<HEX_DIGIT>",
    "<FLOAT_LITERAL>",
    "<FLOAT_EXPONENT>",
    "<RESERVED_NUMBER>",
    "<LIFETIME_TOKEN>",
    "<LIFETIME_OR_LABEL>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
  };

}
