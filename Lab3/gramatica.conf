X -> S
S -> KW_FN IDENTIFIER ( ARGSX ) { BLOCO_CODIGO }
CODIGO -> DECLARACAO ;
CODIGO -> ATRIBUICAO ;
CODIGO -> CONDICAO
CODIGO -> CALL_FUNCTION
CODIGO -> KW_RETURN EXPRESSION_LOGICA
CODIGO -> { BLOCO_CODIGO }
CODIGO -> ;
BLOCO_CODIGO -> CODIGO BLOCO_CODIGO
BLOCO_CODIGO ->
DECLARACAO -> KW_LET IDENTIFIER : TYPE
DECLARACAO -> KW_LET IDENTIFIER : TYPE = EXPRESSION_LOGICA
ATRIBUICAO -> IDENTIFIER = EXPRESSION_LOGICA
CONDICAO -> KW_IF EXPRESSION_LOGICA { BLOCO_CODIGO } CONDICAOELSE
CONDICAOELSE -> KW_ELSE CONDICAO
CONDICAOELSE -> KW_ELSE { BLOCO_CODIGO }
CONDICAOELSE ->
CALL_FUNCTION -> IDENTIFIER ( ARGSX )
ARGS -> ARG , ARGS
ARGS -> ARG
ARGSX ->
ARG -> EXPRESSION_ART
EXPRESSION_ART -> EXPRESSION_ART + TERM
EXPRESSION_ART -> EXPRESSION_ART - TERM
EXPRESSION_ART -> TERM
TERM -> FACTOR
TERM -> TERM * FACTOR
TERM -> TERM / FACTOR
TERM -> TERM % FACTOR
FACTOR -> CALL_FUNCTION
FACTOR -> KW_TRUE
FACTOR -> KW_FALSE
FACTOR -> - INTEGER_LITERAL
FACTOR -> - FLOAT_LITERAL
FACTOR -> IDENTIFIER
FACTOR -> INTEGER_LITERAL
FACTOR -> FLOAT_LITERAL
FACTOR -> ( EXPRESSION_LOGICA )
EXPRESSION_COMP -> EXPRESSION_ART == EXPRESSION_ART
EXPRESSION_COMP -> EXPRESSION_ART < EXPRESSION_ART
EXPRESSION_COMP -> EXPRESSION_ART
EXPRESSION_LOGICA -> EXPRESSION_LOGICA && EXPRESSION_COMP
EXPRESSION_LOGICA -> EXPRESSION_LOGICA || EXPRESSION_COMP
EXPRESSION_LOGICA -> ! EXPRESSION_COMP
EXPRESSION_LOGICA -> EXPRESSION_COMP
ARG -> IDENTIFIER : TYPE
TYPE -> IDENTIFIER
ARGSX -> ARGS
