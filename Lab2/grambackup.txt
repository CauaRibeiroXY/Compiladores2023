X -> S
S -> KW_FN IDENTIFIER ( ) { CODIGO }

CODIGO -> ;
CODIGO -> DECLARACAO CODIGO
CODIGO -> ATRIBUICAO CODIGO
CODIGO -> CONDICAO CODIGO
CODIGO -> WHILE CODIGO
CODIGO -> FUNCTION CODIGO
CODIGO -> CALL_FUNCTION CODIGO
CODIGO -> KW_RETURN EXPRESSION ;
CODIGO -> BLOCO_CODIGO CODIGO
CODIGO ->

CODIGO_FECHADO -> WHILE
CODIGO_FECHADO -> CONDICAO
BLOCO_CODIGO -> { CODIGO } ;


ARRAY_INDEX -> IDENTIFIER [ INTEGER_LITERAL ]
ARRAY1 -> [ CONTENT_ARRAY ]
ARRAY1 -> [ ARRAY1 ]
ARRAY1 -> VALOR ; INTEGER_LITERAL
CONTENT_ARRAY -> VALOR , CONTENT_ARRAY
CONTENT_ARRAY -> VALOR
CONTENT_ARRAY ->

DECLARACAO -> KW_LET IDENTIFIER ;
DECLARACAO -> KW_LET IDENTIFIER = VALOR;
DECLARACAO -> KW_LET IDENTIFIER = EXPRESSION ;
DECLARACAO -> KW_LET IDENTIFIER = [ CONTENT_ARRAY ]

ATRIBUICAO -> IDENTIFIER = VALOR ;

CONDICAO -> KW_IF EXPRESSION { CODIGO } CONDICAOELSE
CONDICAOELSE -> KW_ELSE CONDICAO
CONDICAOELSE -> KW_ELSE { CODIGO }
CONDICAOELSE ->

WHILE -> KW_WHILE EXPRESSION_LOGICA { CODIGO }

FUNCTION -> KW_FN IDENTIFIER ( ARGS ) { CODIGO_FECHADO }
CALL_FUNCTION -> IDENTIFIER ( ARGS ) ;

ARGS -> EXPRESSION , ARGS
ARGS -> EXPRESSION


EXPRESSION -> EXPRESSION OP_ADD TERM
EXPRESSION -> TERM

TERM -> TERM OP_MULT FACTOR
TERM -> FACTOR

FACTOR -> ( EXPRESSION )
FACTOR -> INTEGER_LITERAL
FACTOR -> FLOAT_LITERAL
FACTOR -> IDENTIFIER

EXPRESSION_COMP -> EXPRESSION OP_COMP EXPRESSION
EXPRESSION_COMP -> OP_COMP EXPRESSION

EXPRESSION_LOGICA -> EXPRESSION_LOGICA OP_LOGIC EXPRESSION_COMP
EXPRESSION_LOGICA -> OP_LOGIC_NOT EXPRESSION_COMP
EXPRESSION_LOGICA -> EXPRESSION_COMP

OP_ADD -> +
OP_ADD -> -
OP_MULT -> *
OP_MULT -> /
OP_MULT -> %

OP_COMP -> ==
OP_COMP -> !=
OP_COMP -> >
OP_COMP -> <
OP_COMP -> >=
OP_COMP -> <=

OP_LOGIC -> &&
OP_LOGIC -> ||
OP_LOGIC_NOT -> !

VALOR -> IDENTIFIER
VALOR -> STRING_LITERAL
VALOR -> INTEGER_LITERAL
VALOR -> FLOAT_LITERAL
VALOR -> CHAR_LITERAL
VALOR -> ( EXPRESSION )
VALOR -> ARRAY_INDEX