X -> S
S -> KW_FN IDENTIFIER ( ) { CODIGO }

SEMI -> ; CODIGO
SEMI -> CODIGO
CODIGO -> DECLARACAO SEMI
CODIGO -> ATRIBUICAO SEMI
CODIGO -> CONDICAO SEMI
CODIGO -> WHILE SEMI
CODIGO -> FUNCTION SEMI
CODIGO -> CALL_FUNCTION SEMI
CODIGO -> KW_RETURN EXPRESSION ;
CODIGO -> BLOCO_CODIGO SEMI
CODIGO ->

EXPRESSION -> CALL_FUNCTION SEMI
EXPRESSION -> WHILE
EXPRESSION -> CONDICAO 
EXPRESSION -> EXPRESSION_LOGICA


BLOCO_CODIGO -> { CODIGO } 


ARRAY_INDEX -> IDENTIFIER [ INTEGER_LITERAL ]

ARRAY -> [ CONTENT_ARRAY ] ;

ARRAY -> [ ARRAY ] ;


CONTENT_ARRAY -> FACTOR , CONTENT_ARRAY
CONTENT_ARRAY -> FACTOR
CONTENT_ARRAY ->

DECLARACAO -> KW_LET IDENTIFIER ;
DECLARACAO -> KW_LET IDENTIFIER = EXPRESSION KW_ELSE { EXPRESSION }
DECLARACAO -> KW_LET IDENTIFIER = EXPRESSION_LOGICA ;
DECLARACAO -> KW_LET IDENTIFIER = ARRAY ;
DECLARACAO -> KW_LET IDENTIFIER : TYPE = EXPRESSION_LOGICA ;
DECLARACAO -> KW_LET IDENTIFIER : TYPE = ARRAY ;
DECLARACAO -> KW_LET IDENTIFIER : TYPE = EXPRESSION KW_ELSE { EXPRESSION }

ATRIBUICAO -> IDENTIFIER = EXPRESSION_LOGICA ;

CONDICAO -> KW_IF EXPRESSION_LOGICA { CODIGO } CONDICAOELSE
CONDICAOELSE -> KW_ELSE CONDICAO
CONDICAOELSE -> KW_ELSE { CODIGO } 
CONDICAOELSE ->

WHILE -> KW_WHILE EXPRESSION_LOGICA { CODIGO } 

FUNCTION -> KW_FN IDENTIFIER ( ARGS ) { CODIGO }
FUNCTION -> KW_FN IDENTIFIER ( ARGS ) RARROW TYPE { CODIGO }

CALL_FUNCTION -> IDENTIFIER ( ARGS ) ;

ARGS -> EXPRESSION_ART , ARGS
ARGS -> EXPRESSION_ART
ARGS ->



EXPRESSION_ART -> TERM EXPRESSION_PRIME
EXPRESSION_PRIME -> OP_ADD TERM EXPRESSION_PRIME
EXPRESSION_PRIME ->

TERM -> FACTOR TERM_PRIME
TERM_PRIME -> OP_MULT FACTOR TERM_PRIME
TERM_PRIME ->

FACTOR -> VALOR
FACTOR -> CALL_FUNCTION
FACTOR -> KW_TRUE
FACTOR -> KW_FALSE




EXPRESSION_COMP -> EXPRESSION_ART OP_COMP EXPRESSION_ART
EXPRESSION_COMP -> OP_COMP EXPRESSION_ART
EXPRESSION_COMP -> EXPRESSION_ART


EXPRESSION_LOGICA -> EXPRESSION_LOGICA OP_LOGIC EXPRESSION_COMP
EXPRESSION_LOGICA -> OP_LOGIC_NOT EXPRESSION_COMP
EXPRESSION_LOGICA -> EXPRESSION_COMP

OP_ADD -> +
OP_ADD -> -
OP_MULT -> *
OP_MULT -> /
OP_MULT -> %

OP_COMP -> ==
OP_COMP -> !=
OP_COMP -> >
OP_COMP -> <
OP_COMP -> >=
OP_COMP -> <=

OP_LOGIC -> &&
OP_LOGIC -> ||
OP_LOGIC_NOT -> !

VALOR -> IDENTIFIER
VALOR -> STRING_LITERAL
VALOR -> INTEGER_LITERAL
VALOR -> FLOAT_LITERAL
VALOR -> CHAR_LITERAL
VALOR -> ( EXPRESSION_ART )
VALOR -> ARRAY_INDEX

TYPE -> IDENTIFIER
TYPE -> ARRAY
TYPE -> FUNCTION