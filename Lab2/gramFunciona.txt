X -> S
S -> KW_FN IDENTIFIER ( ) { BLOCO_CODIGO }

CODIGO -> DECLARACAO ;
CODIGO -> ATRIBUICAO ;
CODIGO -> CONDICAO
CODIGO -> WHILE
CODIGO -> FUNCTION
CODIGO -> CALL_FUNCTION
CODIGO -> KW_RETURN EXPRESSION_LOGICA
CODIGO -> { BLOCO_CODIGO }
CODIGO -> ;

BLOCO_CODIGO -> CODIGO BLOCO_CODIGO
BLOCO_CODIGO ->




ARRAY_INDEX -> IDENTIFIER [ INTEGER_LITERAL ]

ARRAY -> [ CONTENT_ARRAY ]
ARRAY -> [ VALOR ; VALOR ]
ARRAY -> [ ARRAY ]


CONTENT_ARRAY -> VALOR , CONTENT_ARRAY
CONTENT_ARRAY -> VALOR
CONTENT_ARRAY ->

DECLARACAO -> KW_LET IDENTIFIER
DECLARACAO -> KW_LET IDENTIFIER = EXPRESSION_LOGICA KW_ELSE { EXPRESSION_LOGICA }
DECLARACAO -> KW_LET IDENTIFIER = EXPRESSION_LOGICA
DECLARACAO -> KW_LET IDENTIFIER = ARRAY
DECLARACAO -> KW_LET IDENTIFIER : TYPE = EXPRESSION_LOGICA
DECLARACAO -> KW_LET IDENTIFIER : TYPE = ARRAY
DECLARACAO -> KW_LET IDENTIFIER : TYPE = EXPRESSION_LOGICA KW_ELSE { EXPRESSION_LOGICA }

ATRIBUICAO -> IDENTIFIER = EXPRESSION_LOGICA

CONDICAO -> KW_IF EXPRESSION_LOGICA { BLOCO_CODIGO } CONDICAOELSE
CONDICAOELSE -> KW_ELSE CONDICAO
CONDICAOELSE -> KW_ELSE { BLOCO_CODIGO }
CONDICAOELSE ->

WHILE -> KW_WHILE EXPRESSION_LOGICA { BLOCO_CODIGO }

FUNCTION -> KW_FN IDENTIFIER ( ARGS ) { BLOCO_CODIGO }
FUNCTION -> KW_FN IDENTIFIER ( ARGS ) RARROW TYPE { BLOCO_CODIGO }

CALL_FUNCTION -> IDENTIFIER ( ARGS ) ;

ARGS -> ARG , ARGS
ARGS -> ARG
ARGS ->
ARG -> EXPRESSION_ART
ARG -> IDENTIFIER : TYPE





EXPRESSION_ART -> TERM EXPRESSION_PRIME
EXPRESSION_PRIME -> OP_ADD TERM EXPRESSION_PRIME
EXPRESSION_PRIME ->

TERM -> FACTOR TERM_PRIME
TERM_PRIME -> OP_MULT FACTOR TERM_PRIME
TERM_PRIME ->

FACTOR -> VALOR
FACTOR -> CALL_FUNCTION
FACTOR -> KW_TRUE
FACTOR -> KW_FALSE
FACTOR -> WHILE
FACTOR -> - VALOR




EXPRESSION_COMP -> EXPRESSION_ART OP_COMP EXPRESSION_ART
EXPRESSION_COMP -> OP_COMP EXPRESSION_ART
EXPRESSION_COMP -> EXPRESSION_ART


EXPRESSION_LOGICA -> EXPRESSION_LOGICA OP_LOGIC EXPRESSION_COMP
EXPRESSION_LOGICA -> OP_LOGIC_NOT EXPRESSION_COMP
EXPRESSION_LOGICA -> EXPRESSION_COMP

OP_ADD -> +
OP_ADD -> -
OP_MULT -> *
OP_MULT -> /
OP_MULT -> %

OP_COMP -> ==
OP_COMP -> !=
OP_COMP -> >
OP_COMP -> <
OP_COMP -> >=
OP_COMP -> <=

OP_LOGIC -> &&
OP_LOGIC -> ||
OP_LOGIC_NOT -> !

VALOR -> IDENTIFIER
VALOR -> STRING_LITERAL
VALOR -> INTEGER_LITERAL
VALOR -> FLOAT_LITERAL
VALOR -> CHAR_LITERAL
VALOR -> ( EXPRESSION_ART )
VALOR -> ARRAY_INDEX

TYPE -> IDENTIFIER
TYPE -> ARRAY
TYPE -> FUNCTION